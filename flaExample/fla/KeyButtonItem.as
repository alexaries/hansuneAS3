package fla{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.filters.ColorMatrixFilter;	import flash.geom.Matrix;		/**	 * 무비클립버튼을 키 정보로 감싼다능..	 * @author hanhyonsoo	 */	public class KeyButtonItem extends EventDispatcher	{		private var invertMatrix:Array =[			-1, 0, 0, 0, 255,			0, -1, 0, 0, 255,			0, 0, -1, 0, 255,			0, 0, 0, 1, 0		];				public var isHoldKey:Boolean = false;				private var _current:int = KeyButton.ENGLISH;		public function set current(value:int):void {			_current = value;			select = _select;		}		public function get current():int {			return _current;		}				private var _select:Boolean = false;		public function set select(value:Boolean):void {						_select = value;						if(isHoldKey){				if(value){					_linkClip.gotoAndStop(2);				} else {					_linkClip.gotoAndStop(1);				}				return;			}						var invertFilter:ColorMatrixFilter = new ColorMatrixFilter(invertMatrix);						if (_current != KeyButton.SPECIAL) _linkClip.gotoAndStop(_current * 2 + 1 + shiftAdd);			else _linkClip.gotoAndStop(5);						if(value){				_linkClip.filters = [invertFilter];			} else {				_linkClip.filters = null;			}		}				public function get select():Boolean {			return _select;		}				private var shiftAdd:int = 0;		public function set shift(value:Boolean):void {			if (_current == KeyButton.SPECIAL) return;//특수문자이면 반사			if(value){				shiftAdd = 1;			} else {				shiftAdd = 0;			}						select = _select;		}						private var _linkClip:MovieClip;				public function KeyButtonItem(toLinkClip:MovieClip) 		{			_linkClip = toLinkClip;			_linkClip.gotoAndStop(1);		}				override public function addEventListener (type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false) : void		{			_linkClip.addEventListener(type, listener, useCapture, priority, useWeakReference);		}				override public function dispatchEvent (event:Event) : Boolean		{			return _linkClip.dispatchEvent(event);		}				override public function hasEventListener (type:String) : Boolean		{			return _linkClip.hasEventListener(type);		}				override public function removeEventListener (type:String, listener:Function, useCapture:Boolean = false) : void {			_linkClip.removeEventListener(type, listener, useCapture);		}				override public function toString () : String {			return _linkClip.toString();		}				override public function willTrigger (type:String) : Boolean {			return _linkClip.willTrigger(type);		}			}}